// This file is auto-generated by @hey-api/openapi-ts

export type _Error = {
	data: {
		[key: string]: unknown;
	};
};

export type App = {
	git: boolean;
	hostname: string;
	path: {
		config: string;
		cwd: string;
		data: string;
		root: string;
		state: string;
	};
	time: {
		initialized?: number;
	};
};

export type AssistantMessage = {
	cost: number;
	error?:
		| (MessageAbortedError & {
				name: 'MessageAbortedError';
		  })
		| (MessageOutputLengthError & {
				name: 'MessageOutputLengthError';
		  })
		| (ProviderAuthError & {
				name: 'ProviderAuthError';
		  })
		| (UnknownError & {
				name: 'UnknownError';
		  });
	id: string;
	modelID: string;
	path: {
		cwd: string;
		root: string;
	};
	providerID: string;
	role: string;
	sessionID: string;
	summary?: boolean;
	system: Array<string>;
	time: {
		completed?: number;
		created: number;
	};
	tokens: {
		cache: {
			read: number;
			write: number;
		};
		input: number;
		output: number;
		reasoning: number;
	};
};

export type ClientOptions = {
	baseUrl: 'http://localhost:4096' | (string & {});
};

export type Config = {
	/**
	 * JSON schema reference for configuration validation
	 */
	$schema?: string;
	/**
	 * @deprecated Use 'share' field instead. Share newly created sessions automatically
	 */
	autoshare?: boolean;
	/**
	 * Automatically update to the latest version
	 */
	autoupdate?: boolean;
	/**
	 * Disable providers that are loaded automatically
	 */
	disabled_providers?: Array<string>;
	experimental?: {
		hook?: {
			file_edited?: {
				[key: string]: Array<{
					command: Array<string>;
					environment?: {
						[key: string]: string;
					};
				}>;
			};
			session_completed?: Array<{
				command: Array<string>;
				environment?: {
					[key: string]: string;
				};
			}>;
		};
	};
	/**
	 * Additional instruction files or patterns to include
	 */
	instructions?: Array<string>;
	keybinds?: KeybindsConfig;
	layout?: LayoutConfig;
	/**
	 * MCP (Model Context Protocol) server configurations
	 */
	mcp?: {
		[key: string]:
			| (McpLocalConfig & {
					type: 'local';
			  })
			| (McpRemoteConfig & {
					type: 'remote';
			  });
	};
	/**
	 * Modes configuration, see https://opencode.ai/docs/modes
	 */
	mode?: {
		[key: string]: ModeConfig | undefined;
		build?: ModeConfig;
		plan?: ModeConfig;
	};
	/**
	 * Model to use in the format of provider/model, eg anthropic/claude-2
	 */
	model?: string;
	/**
	 * Custom provider configurations and model overrides
	 */
	provider?: {
		[key: string]: {
			api?: string;
			env?: Array<string>;
			id?: string;
			models: {
				[key: string]: {
					attachment?: boolean;
					cost?: {
						cache_read?: number;
						cache_write?: number;
						input: number;
						output: number;
					};
					id?: string;
					limit?: {
						context: number;
						output: number;
					};
					name?: string;
					options?: {
						[key: string]: unknown;
					};
					reasoning?: boolean;
					release_date?: string;
					temperature?: boolean;
					tool_call?: boolean;
				};
			};
			name?: string;
			npm?: string;
			options?: {
				[key: string]: unknown;
			};
		};
	};
	/**
	 * Control sharing behavior:'manual' allows manual sharing via commands, 'auto' enables automatic sharing, 'disabled' disables all sharing
	 */
	share?: 'auto' | 'disabled' | 'manual';
	/**
	 * Small model to use for tasks like summarization and title generation in the format of provider/model
	 */
	small_model?: string;
	/**
	 * Theme name to use for the interface
	 */
	theme?: string;
	/**
	 * Custom username to display in conversations instead of system username
	 */
	username?: string;
};

export type DeleteSessionByIdData = {
	body?: never;
	path: {
		id: string;
	};
	query?: never;
	url: '/session/{id}';
};

export type DeleteSessionByIdResponse =
	DeleteSessionByIdResponses[keyof DeleteSessionByIdResponses];

export type DeleteSessionByIdResponses = {
	/**
	 * Successfully deleted session
	 */
	200: boolean;
};

export type DeleteSessionByIdShareData = {
	body?: never;
	path: {
		id: string;
	};
	query?: never;
	url: '/session/{id}/share';
};

export type DeleteSessionByIdShareResponse =
	DeleteSessionByIdShareResponses[keyof DeleteSessionByIdShareResponses];

export type DeleteSessionByIdShareResponses = {
	/**
	 * Successfully unshared session
	 */
	200: Session;
};

export type Event =
	| (EventFileEdited & {
			type: 'file.edited';
	  })
	| (EventFileWatcherUpdated & {
			type: 'file.watcher.updated';
	  })
	| (EventInstallationUpdated & {
			type: 'installation.updated';
	  })
	| (EventLspClientDiagnostics & {
			type: 'lsp.client.diagnostics';
	  })
	| (EventMessagePartUpdated & {
			type: 'message.part.updated';
	  })
	| (EventMessageRemoved & {
			type: 'message.removed';
	  })
	| (EventMessageUpdated & {
			type: 'message.updated';
	  })
	| (EventPermissionUpdated & {
			type: 'permission.updated';
	  })
	| (EventSessionDeleted & {
			type: 'session.deleted';
	  })
	| (EventSessionError & {
			type: 'session.error';
	  })
	| (EventSessionIdle & {
			type: 'session.idle';
	  })
	| (EventSessionUpdated & {
			type: 'session.updated';
	  })
	| (EventStorageWrite & {
			type: 'storage.write';
	  });

export type EventFileEdited = {
	properties: {
		file: string;
	};
	type: string;
};

export type EventFileWatcherUpdated = {
	properties: {
		event: string;
		file: string;
	};
	type: string;
};

export type EventInstallationUpdated = {
	properties: {
		version: string;
	};
	type: string;
};

export type EventLspClientDiagnostics = {
	properties: {
		path: string;
		serverID: string;
	};
	type: string;
};

export type EventMessagePartUpdated = {
	properties: {
		part: Part;
	};
	type: string;
};

export type EventMessageRemoved = {
	properties: {
		messageID: string;
		sessionID: string;
	};
	type: string;
};

export type EventMessageUpdated = {
	properties: {
		info: Message;
	};
	type: string;
};

export type EventPermissionUpdated = {
	properties: PermissionInfo;
	type: string;
};

export type EventSessionDeleted = {
	properties: {
		info: Session;
	};
	type: string;
};

export type EventSessionError = {
	properties: {
		error?:
			| (MessageAbortedError & {
					name: 'MessageAbortedError';
			  })
			| (MessageOutputLengthError & {
					name: 'MessageOutputLengthError';
			  })
			| (ProviderAuthError & {
					name: 'ProviderAuthError';
			  })
			| (UnknownError & {
					name: 'UnknownError';
			  });
		sessionID?: string;
	};
	type: string;
};

export type EventSessionIdle = {
	properties: {
		sessionID: string;
	};
	type: string;
};

export type EventSessionUpdated = {
	properties: {
		info: Session;
	};
	type: string;
};

export type EventStorageWrite = {
	properties: {
		content?: unknown;
		key: string;
	};
	type: string;
};

export type File = {
	added: number;
	path: string;
	removed: number;
	status: 'added' | 'deleted' | 'modified';
};

export type FilePart = {
	filename?: string;
	id: string;
	messageID: string;
	mime: string;
	sessionID: string;
	source?: FilePartSource;
	type: string;
	url: string;
};

export type FilePartInput = {
	filename?: string;
	id?: string;
	mime: string;
	source?: FilePartSource;
	type: string;
	url: string;
};

export type FilePartSource =
	| (FileSource & {
			type: 'file';
	  })
	| (SymbolSource & {
			type: 'symbol';
	  });

export type FilePartSourceText = {
	end: number;
	start: number;
	value: string;
};

export type FileSource = {
	path: string;
	text: FilePartSourceText;
	type: string;
};

export type GetAppData = {
	body?: never;
	path?: never;
	query?: never;
	url: '/app';
};

export type GetAppResponse = GetAppResponses[keyof GetAppResponses];

export type GetAppResponses = {
	/**
	 * 200
	 */
	200: App;
};

export type GetConfigData = {
	body?: never;
	path?: never;
	query?: never;
	url: '/config';
};

export type GetConfigProvidersData = {
	body?: never;
	path?: never;
	query?: never;
	url: '/config/providers';
};

export type GetConfigProvidersResponse =
	GetConfigProvidersResponses[keyof GetConfigProvidersResponses];

export type GetConfigProvidersResponses = {
	/**
	 * List of providers
	 */
	200: {
		default: {
			[key: string]: string;
		};
		providers: Array<Provider>;
	};
};

export type GetConfigResponse = GetConfigResponses[keyof GetConfigResponses];

export type GetConfigResponses = {
	/**
	 * Get config info
	 */
	200: Config;
};

export type GetEventData = {
	body?: never;
	path?: never;
	query?: never;
	url: '/event';
};

export type GetEventResponse = GetEventResponses[keyof GetEventResponses];

export type GetEventResponses = {
	/**
	 * Event stream
	 */
	200: Event;
};

export type GetFileData = {
	body?: never;
	path?: never;
	query: {
		path: string;
	};
	url: '/file';
};

export type GetFileResponse = GetFileResponses[keyof GetFileResponses];

export type GetFileResponses = {
	/**
	 * File content
	 */
	200: {
		content: string;
		type: 'patch' | 'raw';
	};
};

export type GetFileStatusData = {
	body?: never;
	path?: never;
	query?: never;
	url: '/file/status';
};

export type GetFileStatusResponse =
	GetFileStatusResponses[keyof GetFileStatusResponses];

export type GetFileStatusResponses = {
	/**
	 * File status
	 */
	200: Array<File>;
};

export type GetFindData = {
	body?: never;
	path?: never;
	query: {
		pattern: string;
	};
	url: '/find';
};

export type GetFindFileData = {
	body?: never;
	path?: never;
	query: {
		query: string;
	};
	url: '/find/file';
};

export type GetFindFileResponse =
	GetFindFileResponses[keyof GetFindFileResponses];

export type GetFindFileResponses = {
	/**
	 * File paths
	 */
	200: Array<string>;
};

export type GetFindResponse = GetFindResponses[keyof GetFindResponses];

export type GetFindResponses = {
	/**
	 * Matches
	 */
	200: Array<Match>;
};

export type GetFindSymbolData = {
	body?: never;
	path?: never;
	query: {
		query: string;
	};
	url: '/find/symbol';
};

export type GetFindSymbolResponse =
	GetFindSymbolResponses[keyof GetFindSymbolResponses];

export type GetFindSymbolResponses = {
	/**
	 * Symbols
	 */
	200: Array<Symbol>;
};

export type GetModeData = {
	body?: never;
	path?: never;
	query?: never;
	url: '/mode';
};

export type GetModeResponse = GetModeResponses[keyof GetModeResponses];

export type GetModeResponses = {
	/**
	 * List of modes
	 */
	200: Array<Mode>;
};

export type GetSessionByIdMessageData = {
	body?: never;
	path: {
		/**
		 * Session ID
		 */
		id: string;
	};
	query?: never;
	url: '/session/{id}/message';
};

export type GetSessionByIdMessageResponse =
	GetSessionByIdMessageResponses[keyof GetSessionByIdMessageResponses];

export type GetSessionByIdMessageResponses = {
	/**
	 * List of messages
	 */
	200: Array<{
		info: Message;
		parts: Array<Part>;
	}>;
};

export type GetSessionData = {
	body?: never;
	path?: never;
	query?: never;
	url: '/session';
};

export type GetSessionResponse = GetSessionResponses[keyof GetSessionResponses];

export type GetSessionResponses = {
	/**
	 * List of sessions
	 */
	200: Array<Session>;
};

export type KeybindsConfig = {
	/**
	 * Exit the application
	 */
	app_exit: string;
	/**
	 * Show help dialog
	 */
	app_help: string;
	/**
	 * Open external editor
	 */
	editor_open: string;
	/**
	 * Close file
	 */
	file_close: string;
	/**
	 * Split/unified diff
	 */
	file_diff_toggle: string;
	/**
	 * List files
	 */
	file_list: string;
	/**
	 * Search file
	 */
	file_search: string;
	/**
	 * Clear input field
	 */
	input_clear: string;
	/**
	 * Insert newline in input
	 */
	input_newline: string;
	/**
	 * Paste from clipboard
	 */
	input_paste: string;
	/**
	 * Submit input
	 */
	input_submit: string;
	/**
	 * Leader key for keybind combinations
	 */
	leader: string;
	/**
	 * Copy message
	 */
	messages_copy: string;
	/**
	 * Navigate to first message
	 */
	messages_first: string;
	/**
	 * Scroll messages down by half page
	 */
	messages_half_page_down: string;
	/**
	 * Scroll messages up by half page
	 */
	messages_half_page_up: string;
	/**
	 * Navigate to last message
	 */
	messages_last: string;
	/**
	 * Toggle layout
	 */
	messages_layout_toggle: string;
	/**
	 * Navigate to next message
	 */
	messages_next: string;
	/**
	 * Scroll messages down by one page
	 */
	messages_page_down: string;
	/**
	 * Scroll messages up by one page
	 */
	messages_page_up: string;
	/**
	 * Navigate to previous message
	 */
	messages_previous: string;
	/**
	 * Revert message
	 */
	messages_revert: string;
	/**
	 * List available models
	 */
	model_list: string;
	/**
	 * Create/update AGENTS.md
	 */
	project_init: string;
	/**
	 * Compact the session
	 */
	session_compact: string;
	/**
	 * Export session to editor
	 */
	session_export: string;
	/**
	 * Interrupt current session
	 */
	session_interrupt: string;
	/**
	 * List all sessions
	 */
	session_list: string;
	/**
	 * Create a new session
	 */
	session_new: string;
	/**
	 * Share current session
	 */
	session_share: string;
	/**
	 * Unshare current session
	 */
	session_unshare: string;
	/**
	 * Next mode
	 */
	switch_mode: string;
	/**
	 * Previous Mode
	 */
	switch_mode_reverse: string;
	/**
	 * List available themes
	 */
	theme_list: string;
	/**
	 * Toggle tool details
	 */
	tool_details: string;
};

export type LayoutConfig = 'auto' | 'stretch';

export type Match = {
	absolute_offset: number;
	line_number: number;
	lines: {
		text: string;
	};
	path: {
		text: string;
	};
	submatches: Array<{
		end: number;
		match: {
			text: string;
		};
		start: number;
	}>;
};

export type McpLocalConfig = {
	/**
	 * Command and arguments to run the MCP server
	 */
	command: Array<string>;
	/**
	 * Enable or disable the MCP server on startup
	 */
	enabled?: boolean;
	/**
	 * Environment variables to set when running the MCP server
	 */
	environment?: {
		[key: string]: string;
	};
	/**
	 * Type of MCP server connection
	 */
	type: string;
};

export type McpRemoteConfig = {
	/**
	 * Enable or disable the MCP server on startup
	 */
	enabled?: boolean;
	/**
	 * Headers to send with the request
	 */
	headers?: {
		[key: string]: string;
	};
	/**
	 * Type of MCP server connection
	 */
	type: string;
	/**
	 * URL of the remote MCP server
	 */
	url: string;
};

export type Message =
	| (AssistantMessage & {
			role: 'assistant';
	  })
	| (UserMessage & {
			role: 'user';
	  });

export type MessageAbortedError = {
	data: {
		[key: string]: unknown;
	};
	name: string;
};

export type MessageOutputLengthError = {
	data: {
		[key: string]: unknown;
	};
	name: string;
};

export type Mode = {
	model?: {
		modelID: string;
		providerID: string;
	};
	name: string;
	prompt?: string;
	tools: {
		[key: string]: boolean;
	};
};

export type ModeConfig = {
	model?: string;
	prompt?: string;
	tools?: {
		[key: string]: boolean;
	};
};

export type Model = {
	attachment: boolean;
	cost: {
		cache_read?: number;
		cache_write?: number;
		input: number;
		output: number;
	};
	id: string;
	limit: {
		context: number;
		output: number;
	};
	name: string;
	options: {
		[key: string]: unknown;
	};
	reasoning: boolean;
	release_date: string;
	temperature: boolean;
	tool_call: boolean;
};

export type Part =
	| (FilePart & {
			type: 'file';
	  })
	| (SnapshotPart & {
			type: 'snapshot';
	  })
	| (StepFinishPart & {
			type: 'step-finish';
	  })
	| (StepStartPart & {
			type: 'step-start';
	  })
	| (TextPart & {
			type: 'text';
	  })
	| (ToolPart & {
			type: 'tool';
	  });

export type PermissionInfo = {
	id: string;
	metadata: {
		[key: string]: unknown;
	};
	sessionID: string;
	time: {
		created: number;
	};
	title: string;
};

export type PostAppInitData = {
	body?: never;
	path?: never;
	query?: never;
	url: '/app/init';
};

export type PostAppInitResponse =
	PostAppInitResponses[keyof PostAppInitResponses];

export type PostAppInitResponses = {
	/**
	 * Initialize the app
	 */
	200: boolean;
};

export type PostLogData = {
	body?: {
		/**
		 * Additional metadata for the log entry
		 */
		extra?: {
			[key: string]: unknown;
		};
		/**
		 * Log level
		 */
		level: 'debug' | 'error' | 'info' | 'warn';
		/**
		 * Log message
		 */
		message: string;
		/**
		 * Service name for the log entry
		 */
		service: string;
	};
	path?: never;
	query?: never;
	url: '/log';
};

export type PostLogResponse = PostLogResponses[keyof PostLogResponses];

export type PostLogResponses = {
	/**
	 * Log entry written successfully
	 */
	200: boolean;
};

export type PostSessionByIdAbortData = {
	body?: never;
	path: {
		id: string;
	};
	query?: never;
	url: '/session/{id}/abort';
};

export type PostSessionByIdAbortResponse =
	PostSessionByIdAbortResponses[keyof PostSessionByIdAbortResponses];

export type PostSessionByIdAbortResponses = {
	/**
	 * Aborted session
	 */
	200: boolean;
};

export type PostSessionByIdInitData = {
	body?: {
		messageID: string;
		modelID: string;
		providerID: string;
	};
	path: {
		/**
		 * Session ID
		 */
		id: string;
	};
	query?: never;
	url: '/session/{id}/init';
};

export type PostSessionByIdInitResponse =
	PostSessionByIdInitResponses[keyof PostSessionByIdInitResponses];

export type PostSessionByIdInitResponses = {
	/**
	 * 200
	 */
	200: boolean;
};

export type PostSessionByIdMessageData = {
	body?: {
		messageID?: string;
		mode?: string;
		modelID: string;
		parts: Array<
			| (FilePartInput & {
					type: 'file';
			  })
			| (TextPartInput & {
					type: 'text';
			  })
		>;
		providerID: string;
		tools?: {
			[key: string]: boolean;
		};
	};
	path: {
		/**
		 * Session ID
		 */
		id: string;
	};
	query?: never;
	url: '/session/{id}/message';
};

export type PostSessionByIdMessageResponse =
	PostSessionByIdMessageResponses[keyof PostSessionByIdMessageResponses];

export type PostSessionByIdMessageResponses = {
	/**
	 * Created message
	 */
	200: AssistantMessage;
};

export type PostSessionByIdShareData = {
	body?: never;
	path: {
		id: string;
	};
	query?: never;
	url: '/session/{id}/share';
};

export type PostSessionByIdShareResponse =
	PostSessionByIdShareResponses[keyof PostSessionByIdShareResponses];

export type PostSessionByIdShareResponses = {
	/**
	 * Successfully shared session
	 */
	200: Session;
};

export type PostSessionByIdSummarizeData = {
	body?: {
		modelID: string;
		providerID: string;
	};
	path: {
		/**
		 * Session ID
		 */
		id: string;
	};
	query?: never;
	url: '/session/{id}/summarize';
};

export type PostSessionByIdSummarizeResponse =
	PostSessionByIdSummarizeResponses[keyof PostSessionByIdSummarizeResponses];

export type PostSessionByIdSummarizeResponses = {
	/**
	 * Summarized session
	 */
	200: boolean;
};

export type PostSessionData = {
	body?: never;
	path?: never;
	query?: never;
	url: '/session';
};

export type PostSessionError = PostSessionErrors[keyof PostSessionErrors];

export type PostSessionErrors = {
	/**
	 * Bad request
	 */
	400: _Error;
};

export type PostSessionResponse =
	PostSessionResponses[keyof PostSessionResponses];

export type PostSessionResponses = {
	/**
	 * Successfully created session
	 */
	200: Session;
};

export type Provider = {
	api?: string;
	env: Array<string>;
	id: string;
	models: {
		[key: string]: Model;
	};
	name: string;
	npm?: string;
};

export type ProviderAuthError = {
	data: {
		message: string;
		providerID: string;
	};
	name: string;
};

export type Range = {
	end: {
		character: number;
		line: number;
	};
	start: {
		character: number;
		line: number;
	};
};

export type Session = {
	id: string;
	parentID?: string;
	revert?: {
		messageID: string;
		part: number;
		snapshot?: string;
	};
	share?: {
		url: string;
	};
	time: {
		created: number;
		updated: number;
	};
	title: string;
	version: string;
};

export type SnapshotPart = {
	id: string;
	messageID: string;
	sessionID: string;
	snapshot: string;
	type: string;
};

export type StepFinishPart = {
	cost: number;
	id: string;
	messageID: string;
	sessionID: string;
	tokens: {
		cache: {
			read: number;
			write: number;
		};
		input: number;
		output: number;
		reasoning: number;
	};
	type: string;
};

export type StepStartPart = {
	id: string;
	messageID: string;
	sessionID: string;
	type: string;
};

export type Symbol = {
	kind: number;
	location: {
		range: Range;
		uri: string;
	};
	name: string;
};

export type SymbolSource = {
	kind: number;
	name: string;
	path: string;
	range: Range;
	text: FilePartSourceText;
	type: string;
};

export type TextPart = {
	id: string;
	messageID: string;
	sessionID: string;
	synthetic?: boolean;
	text: string;
	time?: {
		end?: number;
		start: number;
	};
	type: string;
};

export type TextPartInput = {
	id?: string;
	synthetic?: boolean;
	text: string;
	time?: {
		end?: number;
		start: number;
	};
	type: string;
};

export type ToolPart = {
	callID: string;
	id: string;
	messageID: string;
	sessionID: string;
	state: ToolState;
	tool: string;
	type: string;
};

export type ToolState =
	| (ToolStateCompleted & {
			status: 'completed';
	  })
	| (ToolStateError & {
			status: 'error';
	  })
	| (ToolStatePending & {
			status: 'pending';
	  })
	| (ToolStateRunning & {
			status: 'running';
	  });

export type ToolStateCompleted = {
	input: {
		[key: string]: unknown;
	};
	metadata: {
		[key: string]: unknown;
	};
	output: string;
	status: string;
	time: {
		end: number;
		start: number;
	};
	title: string;
};

export type ToolStateError = {
	error: string;
	input: {
		[key: string]: unknown;
	};
	status: string;
	time: {
		end: number;
		start: number;
	};
};

export type ToolStatePending = {
	status: string;
};

export type ToolStateRunning = {
	input?: unknown;
	metadata?: {
		[key: string]: unknown;
	};
	status: string;
	time: {
		start: number;
	};
	title?: string;
};

export type UnknownError = {
	data: {
		message: string;
	};
	name: string;
};

export type UserMessage = {
	id: string;
	role: string;
	sessionID: string;
	time: {
		created: number;
	};
};
