// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type {
	GetEventData,
	GetEventResponses,
	GetAppData,
	GetAppResponses,
	PostAppInitData,
	PostAppInitResponses,
	GetConfigData,
	GetConfigResponses,
	GetSessionData,
	GetSessionResponses,
	PostSessionData,
	PostSessionResponses,
	PostSessionErrors,
	DeleteSessionByIdData,
	DeleteSessionByIdResponses,
	PostSessionByIdInitData,
	PostSessionByIdInitResponses,
	PostSessionByIdAbortData,
	PostSessionByIdAbortResponses,
	DeleteSessionByIdShareData,
	DeleteSessionByIdShareResponses,
	PostSessionByIdShareData,
	PostSessionByIdShareResponses,
	PostSessionByIdSummarizeData,
	PostSessionByIdSummarizeResponses,
	GetSessionByIdMessageData,
	GetSessionByIdMessageResponses,
	PostSessionByIdMessageData,
	PostSessionByIdMessageResponses,
	GetConfigProvidersData,
	GetConfigProvidersResponses,
	GetFindData,
	GetFindResponses,
	GetFindFileData,
	GetFindFileResponses,
	GetFindSymbolData,
	GetFindSymbolResponses,
	GetFileData,
	GetFileResponses,
	GetFileStatusData,
	GetFileStatusResponses,
	PostLogData,
	PostLogResponses,
	GetModeData,
	GetModeResponses,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Get events
 */
export const getEvent = <ThrowOnError extends boolean = false>(
	options?: Options<GetEventData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetEventResponses,
		unknown,
		ThrowOnError
	>({
		url: '/event',
		...options,
	});
};

/**
 * Get app info
 */
export const getApp = <ThrowOnError extends boolean = false>(
	options?: Options<GetAppData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetAppResponses,
		unknown,
		ThrowOnError
	>({
		url: '/app',
		...options,
	});
};

/**
 * Initialize the app
 */
export const postAppInit = <ThrowOnError extends boolean = false>(
	options?: Options<PostAppInitData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		PostAppInitResponses,
		unknown,
		ThrowOnError
	>({
		url: '/app/init',
		...options,
	});
};

/**
 * Get config info
 */
export const getConfig = <ThrowOnError extends boolean = false>(
	options?: Options<GetConfigData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetConfigResponses,
		unknown,
		ThrowOnError
	>({
		url: '/config',
		...options,
	});
};

/**
 * List all sessions
 */
export const getSession = <ThrowOnError extends boolean = false>(
	options?: Options<GetSessionData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetSessionResponses,
		unknown,
		ThrowOnError
	>({
		url: '/session',
		...options,
	});
};

/**
 * Create a new session
 */
export const postSession = <ThrowOnError extends boolean = false>(
	options?: Options<PostSessionData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		PostSessionResponses,
		PostSessionErrors,
		ThrowOnError
	>({
		url: '/session',
		...options,
	});
};

/**
 * Delete a session and all its data
 */
export const deleteSessionById = <ThrowOnError extends boolean = false>(
	options: Options<DeleteSessionByIdData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteSessionByIdResponses,
		unknown,
		ThrowOnError
	>({
		url: '/session/{id}',
		...options,
	});
};

/**
 * Analyze the app and create an AGENTS.md file
 */
export const postSessionByIdInit = <ThrowOnError extends boolean = false>(
	options: Options<PostSessionByIdInitData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		PostSessionByIdInitResponses,
		unknown,
		ThrowOnError
	>({
		url: '/session/{id}/init',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	});
};

/**
 * Abort a session
 */
export const postSessionByIdAbort = <ThrowOnError extends boolean = false>(
	options: Options<PostSessionByIdAbortData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		PostSessionByIdAbortResponses,
		unknown,
		ThrowOnError
	>({
		url: '/session/{id}/abort',
		...options,
	});
};

/**
 * Unshare the session
 */
export const deleteSessionByIdShare = <ThrowOnError extends boolean = false>(
	options: Options<DeleteSessionByIdShareData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteSessionByIdShareResponses,
		unknown,
		ThrowOnError
	>({
		url: '/session/{id}/share',
		...options,
	});
};

/**
 * Share a session
 */
export const postSessionByIdShare = <ThrowOnError extends boolean = false>(
	options: Options<PostSessionByIdShareData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		PostSessionByIdShareResponses,
		unknown,
		ThrowOnError
	>({
		url: '/session/{id}/share',
		...options,
	});
};

/**
 * Summarize the session
 */
export const postSessionByIdSummarize = <ThrowOnError extends boolean = false>(
	options: Options<PostSessionByIdSummarizeData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		PostSessionByIdSummarizeResponses,
		unknown,
		ThrowOnError
	>({
		url: '/session/{id}/summarize',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	});
};

/**
 * List messages for a session
 */
export const getSessionByIdMessage = <ThrowOnError extends boolean = false>(
	options: Options<GetSessionByIdMessageData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetSessionByIdMessageResponses,
		unknown,
		ThrowOnError
	>({
		url: '/session/{id}/message',
		...options,
	});
};

/**
 * Create and send a new message to a session
 */
export const postSessionByIdMessage = <ThrowOnError extends boolean = false>(
	options: Options<PostSessionByIdMessageData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		PostSessionByIdMessageResponses,
		unknown,
		ThrowOnError
	>({
		url: '/session/{id}/message',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
	});
};

/**
 * List all providers
 */
export const getConfigProviders = <ThrowOnError extends boolean = false>(
	options?: Options<GetConfigProvidersData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetConfigProvidersResponses,
		unknown,
		ThrowOnError
	>({
		url: '/config/providers',
		...options,
	});
};

/**
 * Find text in files
 */
export const getFind = <ThrowOnError extends boolean = false>(
	options: Options<GetFindData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetFindResponses,
		unknown,
		ThrowOnError
	>({
		url: '/find',
		...options,
	});
};

/**
 * Find files
 */
export const getFindFile = <ThrowOnError extends boolean = false>(
	options: Options<GetFindFileData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetFindFileResponses,
		unknown,
		ThrowOnError
	>({
		url: '/find/file',
		...options,
	});
};

/**
 * Find workspace symbols
 */
export const getFindSymbol = <ThrowOnError extends boolean = false>(
	options: Options<GetFindSymbolData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetFindSymbolResponses,
		unknown,
		ThrowOnError
	>({
		url: '/find/symbol',
		...options,
	});
};

/**
 * Read a file
 */
export const getFile = <ThrowOnError extends boolean = false>(
	options: Options<GetFileData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetFileResponses,
		unknown,
		ThrowOnError
	>({
		url: '/file',
		...options,
	});
};

/**
 * Get file status
 */
export const getFileStatus = <ThrowOnError extends boolean = false>(
	options?: Options<GetFileStatusData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetFileStatusResponses,
		unknown,
		ThrowOnError
	>({
		url: '/file/status',
		...options,
	});
};

/**
 * Write a log entry to the server logs
 */
export const postLog = <ThrowOnError extends boolean = false>(
	options?: Options<PostLogData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		PostLogResponses,
		unknown,
		ThrowOnError
	>({
		url: '/log',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * List all modes
 */
export const getMode = <ThrowOnError extends boolean = false>(
	options?: Options<GetModeData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetModeResponses,
		unknown,
		ThrowOnError
	>({
		url: '/mode',
		...options,
	});
};
