// This file is auto-generated by @hey-api/openapi-ts

export const EventSchema = {
	discriminator: {
		mapping: {
			'file.edited': '#/components/schemas/Event.file.edited',
			'file.watcher.updated': '#/components/schemas/Event.file.watcher.updated',
			'installation.updated': '#/components/schemas/Event.installation.updated',
			'lsp.client.diagnostics':
				'#/components/schemas/Event.lsp.client.diagnostics',
			'message.part.updated': '#/components/schemas/Event.message.part.updated',
			'message.removed': '#/components/schemas/Event.message.removed',
			'message.updated': '#/components/schemas/Event.message.updated',
			'permission.updated': '#/components/schemas/Event.permission.updated',
			'session.deleted': '#/components/schemas/Event.session.deleted',
			'session.error': '#/components/schemas/Event.session.error',
			'session.idle': '#/components/schemas/Event.session.idle',
			'session.updated': '#/components/schemas/Event.session.updated',
			'storage.write': '#/components/schemas/Event.storage.write',
		},
		propertyName: 'type',
	},
	oneOf: [
		{
			$ref: '#/components/schemas/Event.lsp.client.diagnostics',
		},
		{
			$ref: '#/components/schemas/Event.permission.updated',
		},
		{
			$ref: '#/components/schemas/Event.file.edited',
		},
		{
			$ref: '#/components/schemas/Event.installation.updated',
		},
		{
			$ref: '#/components/schemas/Event.message.updated',
		},
		{
			$ref: '#/components/schemas/Event.message.removed',
		},
		{
			$ref: '#/components/schemas/Event.message.part.updated',
		},
		{
			$ref: '#/components/schemas/Event.storage.write',
		},
		{
			$ref: '#/components/schemas/Event.session.updated',
		},
		{
			$ref: '#/components/schemas/Event.session.deleted',
		},
		{
			$ref: '#/components/schemas/Event.session.idle',
		},
		{
			$ref: '#/components/schemas/Event.session.error',
		},
		{
			$ref: '#/components/schemas/Event.file.watcher.updated',
		},
	],
} as const;

export const Event_lsp_client_diagnosticsSchema = {
	properties: {
		properties: {
			properties: {
				path: {
					type: 'string',
				},
				serverID: {
					type: 'string',
				},
			},
			required: ['serverID', 'path'],
			type: 'object',
		},
		type: {
			const: 'lsp.client.diagnostics',
			type: 'string',
		},
	},
	required: ['type', 'properties'],
	type: 'object',
} as const;

export const Event_permission_updatedSchema = {
	properties: {
		properties: {
			$ref: '#/components/schemas/permission.info',
		},
		type: {
			const: 'permission.updated',
			type: 'string',
		},
	},
	required: ['type', 'properties'],
	type: 'object',
} as const;

export const permission_infoSchema = {
	properties: {
		id: {
			type: 'string',
		},
		metadata: {
			additionalProperties: {},
			type: 'object',
		},
		sessionID: {
			type: 'string',
		},
		time: {
			properties: {
				created: {
					type: 'number',
				},
			},
			required: ['created'],
			type: 'object',
		},
		title: {
			type: 'string',
		},
	},
	required: ['id', 'sessionID', 'title', 'metadata', 'time'],
	type: 'object',
} as const;

export const Event_file_editedSchema = {
	properties: {
		properties: {
			properties: {
				file: {
					type: 'string',
				},
			},
			required: ['file'],
			type: 'object',
		},
		type: {
			const: 'file.edited',
			type: 'string',
		},
	},
	required: ['type', 'properties'],
	type: 'object',
} as const;

export const Event_installation_updatedSchema = {
	properties: {
		properties: {
			properties: {
				version: {
					type: 'string',
				},
			},
			required: ['version'],
			type: 'object',
		},
		type: {
			const: 'installation.updated',
			type: 'string',
		},
	},
	required: ['type', 'properties'],
	type: 'object',
} as const;

export const Event_message_updatedSchema = {
	properties: {
		properties: {
			properties: {
				info: {
					$ref: '#/components/schemas/Message',
				},
			},
			required: ['info'],
			type: 'object',
		},
		type: {
			const: 'message.updated',
			type: 'string',
		},
	},
	required: ['type', 'properties'],
	type: 'object',
} as const;

export const MessageSchema = {
	discriminator: {
		mapping: {
			assistant: '#/components/schemas/AssistantMessage',
			user: '#/components/schemas/UserMessage',
		},
		propertyName: 'role',
	},
	oneOf: [
		{
			$ref: '#/components/schemas/UserMessage',
		},
		{
			$ref: '#/components/schemas/AssistantMessage',
		},
	],
} as const;

export const UserMessageSchema = {
	properties: {
		id: {
			type: 'string',
		},
		role: {
			const: 'user',
			type: 'string',
		},
		sessionID: {
			type: 'string',
		},
		time: {
			properties: {
				created: {
					type: 'number',
				},
			},
			required: ['created'],
			type: 'object',
		},
	},
	required: ['id', 'sessionID', 'role', 'time'],
	type: 'object',
} as const;

export const AssistantMessageSchema = {
	properties: {
		cost: {
			type: 'number',
		},
		error: {
			discriminator: {
				mapping: {
					MessageAbortedError: '#/components/schemas/MessageAbortedError',
					MessageOutputLengthError:
						'#/components/schemas/MessageOutputLengthError',
					ProviderAuthError: '#/components/schemas/ProviderAuthError',
					UnknownError: '#/components/schemas/UnknownError',
				},
				propertyName: 'name',
			},
			oneOf: [
				{
					$ref: '#/components/schemas/ProviderAuthError',
				},
				{
					$ref: '#/components/schemas/UnknownError',
				},
				{
					$ref: '#/components/schemas/MessageOutputLengthError',
				},
				{
					$ref: '#/components/schemas/MessageAbortedError',
				},
			],
		},
		id: {
			type: 'string',
		},
		modelID: {
			type: 'string',
		},
		path: {
			properties: {
				cwd: {
					type: 'string',
				},
				root: {
					type: 'string',
				},
			},
			required: ['cwd', 'root'],
			type: 'object',
		},
		providerID: {
			type: 'string',
		},
		role: {
			const: 'assistant',
			type: 'string',
		},
		sessionID: {
			type: 'string',
		},
		summary: {
			type: 'boolean',
		},
		system: {
			items: {
				type: 'string',
			},
			type: 'array',
		},
		time: {
			properties: {
				completed: {
					type: 'number',
				},
				created: {
					type: 'number',
				},
			},
			required: ['created'],
			type: 'object',
		},
		tokens: {
			properties: {
				cache: {
					properties: {
						read: {
							type: 'number',
						},
						write: {
							type: 'number',
						},
					},
					required: ['read', 'write'],
					type: 'object',
				},
				input: {
					type: 'number',
				},
				output: {
					type: 'number',
				},
				reasoning: {
					type: 'number',
				},
			},
			required: ['input', 'output', 'reasoning', 'cache'],
			type: 'object',
		},
	},
	required: [
		'id',
		'sessionID',
		'role',
		'time',
		'system',
		'modelID',
		'providerID',
		'path',
		'cost',
		'tokens',
	],
	type: 'object',
} as const;

export const ProviderAuthErrorSchema = {
	properties: {
		data: {
			properties: {
				message: {
					type: 'string',
				},
				providerID: {
					type: 'string',
				},
			},
			required: ['providerID', 'message'],
			type: 'object',
		},
		name: {
			const: 'ProviderAuthError',
			type: 'string',
		},
	},
	required: ['name', 'data'],
	type: 'object',
} as const;

export const UnknownErrorSchema = {
	properties: {
		data: {
			properties: {
				message: {
					type: 'string',
				},
			},
			required: ['message'],
			type: 'object',
		},
		name: {
			const: 'UnknownError',
			type: 'string',
		},
	},
	required: ['name', 'data'],
	type: 'object',
} as const;

export const MessageOutputLengthErrorSchema = {
	properties: {
		data: {
			type: 'object',
		},
		name: {
			const: 'MessageOutputLengthError',
			type: 'string',
		},
	},
	required: ['name', 'data'],
	type: 'object',
} as const;

export const MessageAbortedErrorSchema = {
	properties: {
		data: {
			type: 'object',
		},
		name: {
			const: 'MessageAbortedError',
			type: 'string',
		},
	},
	required: ['name', 'data'],
	type: 'object',
} as const;

export const Event_message_removedSchema = {
	properties: {
		properties: {
			properties: {
				messageID: {
					type: 'string',
				},
				sessionID: {
					type: 'string',
				},
			},
			required: ['sessionID', 'messageID'],
			type: 'object',
		},
		type: {
			const: 'message.removed',
			type: 'string',
		},
	},
	required: ['type', 'properties'],
	type: 'object',
} as const;

export const Event_message_part_updatedSchema = {
	properties: {
		properties: {
			properties: {
				part: {
					$ref: '#/components/schemas/Part',
				},
			},
			required: ['part'],
			type: 'object',
		},
		type: {
			const: 'message.part.updated',
			type: 'string',
		},
	},
	required: ['type', 'properties'],
	type: 'object',
} as const;

export const PartSchema = {
	discriminator: {
		mapping: {
			file: '#/components/schemas/FilePart',
			snapshot: '#/components/schemas/SnapshotPart',
			'step-finish': '#/components/schemas/StepFinishPart',
			'step-start': '#/components/schemas/StepStartPart',
			text: '#/components/schemas/TextPart',
			tool: '#/components/schemas/ToolPart',
		},
		propertyName: 'type',
	},
	oneOf: [
		{
			$ref: '#/components/schemas/TextPart',
		},
		{
			$ref: '#/components/schemas/FilePart',
		},
		{
			$ref: '#/components/schemas/ToolPart',
		},
		{
			$ref: '#/components/schemas/StepStartPart',
		},
		{
			$ref: '#/components/schemas/StepFinishPart',
		},
		{
			$ref: '#/components/schemas/SnapshotPart',
		},
	],
} as const;

export const TextPartSchema = {
	properties: {
		id: {
			type: 'string',
		},
		messageID: {
			type: 'string',
		},
		sessionID: {
			type: 'string',
		},
		synthetic: {
			type: 'boolean',
		},
		text: {
			type: 'string',
		},
		time: {
			properties: {
				end: {
					type: 'number',
				},
				start: {
					type: 'number',
				},
			},
			required: ['start'],
			type: 'object',
		},
		type: {
			const: 'text',
			type: 'string',
		},
	},
	required: ['id', 'sessionID', 'messageID', 'type', 'text'],
	type: 'object',
} as const;

export const FilePartSchema = {
	properties: {
		filename: {
			type: 'string',
		},
		id: {
			type: 'string',
		},
		messageID: {
			type: 'string',
		},
		mime: {
			type: 'string',
		},
		sessionID: {
			type: 'string',
		},
		source: {
			$ref: '#/components/schemas/FilePartSource',
		},
		type: {
			const: 'file',
			type: 'string',
		},
		url: {
			type: 'string',
		},
	},
	required: ['id', 'sessionID', 'messageID', 'type', 'mime', 'url'],
	type: 'object',
} as const;

export const FilePartSourceSchema = {
	discriminator: {
		mapping: {
			file: '#/components/schemas/FileSource',
			symbol: '#/components/schemas/SymbolSource',
		},
		propertyName: 'type',
	},
	oneOf: [
		{
			$ref: '#/components/schemas/FileSource',
		},
		{
			$ref: '#/components/schemas/SymbolSource',
		},
	],
} as const;

export const FileSourceSchema = {
	properties: {
		path: {
			type: 'string',
		},
		text: {
			$ref: '#/components/schemas/FilePartSourceText',
		},
		type: {
			const: 'file',
			type: 'string',
		},
	},
	required: ['text', 'type', 'path'],
	type: 'object',
} as const;

export const FilePartSourceTextSchema = {
	properties: {
		end: {
			type: 'integer',
		},
		start: {
			type: 'integer',
		},
		value: {
			type: 'string',
		},
	},
	required: ['value', 'start', 'end'],
	type: 'object',
} as const;

export const SymbolSourceSchema = {
	properties: {
		kind: {
			type: 'integer',
		},
		name: {
			type: 'string',
		},
		path: {
			type: 'string',
		},
		range: {
			$ref: '#/components/schemas/Range',
		},
		text: {
			$ref: '#/components/schemas/FilePartSourceText',
		},
		type: {
			const: 'symbol',
			type: 'string',
		},
	},
	required: ['text', 'type', 'path', 'range', 'name', 'kind'],
	type: 'object',
} as const;

export const RangeSchema = {
	properties: {
		end: {
			properties: {
				character: {
					type: 'number',
				},
				line: {
					type: 'number',
				},
			},
			required: ['line', 'character'],
			type: 'object',
		},
		start: {
			properties: {
				character: {
					type: 'number',
				},
				line: {
					type: 'number',
				},
			},
			required: ['line', 'character'],
			type: 'object',
		},
	},
	required: ['start', 'end'],
	type: 'object',
} as const;

export const ToolPartSchema = {
	properties: {
		callID: {
			type: 'string',
		},
		id: {
			type: 'string',
		},
		messageID: {
			type: 'string',
		},
		sessionID: {
			type: 'string',
		},
		state: {
			$ref: '#/components/schemas/ToolState',
		},
		tool: {
			type: 'string',
		},
		type: {
			const: 'tool',
			type: 'string',
		},
	},
	required: ['id', 'sessionID', 'messageID', 'type', 'callID', 'tool', 'state'],
	type: 'object',
} as const;

export const ToolStateSchema = {
	discriminator: {
		mapping: {
			completed: '#/components/schemas/ToolStateCompleted',
			error: '#/components/schemas/ToolStateError',
			pending: '#/components/schemas/ToolStatePending',
			running: '#/components/schemas/ToolStateRunning',
		},
		propertyName: 'status',
	},
	oneOf: [
		{
			$ref: '#/components/schemas/ToolStatePending',
		},
		{
			$ref: '#/components/schemas/ToolStateRunning',
		},
		{
			$ref: '#/components/schemas/ToolStateCompleted',
		},
		{
			$ref: '#/components/schemas/ToolStateError',
		},
	],
} as const;

export const ToolStatePendingSchema = {
	properties: {
		status: {
			const: 'pending',
			type: 'string',
		},
	},
	required: ['status'],
	type: 'object',
} as const;

export const ToolStateRunningSchema = {
	properties: {
		input: {},
		metadata: {
			additionalProperties: {},
			type: 'object',
		},
		status: {
			const: 'running',
			type: 'string',
		},
		time: {
			properties: {
				start: {
					type: 'number',
				},
			},
			required: ['start'],
			type: 'object',
		},
		title: {
			type: 'string',
		},
	},
	required: ['status', 'time'],
	type: 'object',
} as const;

export const ToolStateCompletedSchema = {
	properties: {
		input: {
			additionalProperties: {},
			type: 'object',
		},
		metadata: {
			additionalProperties: {},
			type: 'object',
		},
		output: {
			type: 'string',
		},
		status: {
			const: 'completed',
			type: 'string',
		},
		time: {
			properties: {
				end: {
					type: 'number',
				},
				start: {
					type: 'number',
				},
			},
			required: ['start', 'end'],
			type: 'object',
		},
		title: {
			type: 'string',
		},
	},
	required: ['status', 'input', 'output', 'title', 'metadata', 'time'],
	type: 'object',
} as const;

export const ToolStateErrorSchema = {
	properties: {
		error: {
			type: 'string',
		},
		input: {
			additionalProperties: {},
			type: 'object',
		},
		status: {
			const: 'error',
			type: 'string',
		},
		time: {
			properties: {
				end: {
					type: 'number',
				},
				start: {
					type: 'number',
				},
			},
			required: ['start', 'end'],
			type: 'object',
		},
	},
	required: ['status', 'input', 'error', 'time'],
	type: 'object',
} as const;

export const StepStartPartSchema = {
	properties: {
		id: {
			type: 'string',
		},
		messageID: {
			type: 'string',
		},
		sessionID: {
			type: 'string',
		},
		type: {
			const: 'step-start',
			type: 'string',
		},
	},
	required: ['id', 'sessionID', 'messageID', 'type'],
	type: 'object',
} as const;

export const StepFinishPartSchema = {
	properties: {
		cost: {
			type: 'number',
		},
		id: {
			type: 'string',
		},
		messageID: {
			type: 'string',
		},
		sessionID: {
			type: 'string',
		},
		tokens: {
			properties: {
				cache: {
					properties: {
						read: {
							type: 'number',
						},
						write: {
							type: 'number',
						},
					},
					required: ['read', 'write'],
					type: 'object',
				},
				input: {
					type: 'number',
				},
				output: {
					type: 'number',
				},
				reasoning: {
					type: 'number',
				},
			},
			required: ['input', 'output', 'reasoning', 'cache'],
			type: 'object',
		},
		type: {
			const: 'step-finish',
			type: 'string',
		},
	},
	required: ['id', 'sessionID', 'messageID', 'type', 'cost', 'tokens'],
	type: 'object',
} as const;

export const SnapshotPartSchema = {
	properties: {
		id: {
			type: 'string',
		},
		messageID: {
			type: 'string',
		},
		sessionID: {
			type: 'string',
		},
		snapshot: {
			type: 'string',
		},
		type: {
			const: 'snapshot',
			type: 'string',
		},
	},
	required: ['id', 'sessionID', 'messageID', 'type', 'snapshot'],
	type: 'object',
} as const;

export const Event_storage_writeSchema = {
	properties: {
		properties: {
			properties: {
				content: {},
				key: {
					type: 'string',
				},
			},
			required: ['key'],
			type: 'object',
		},
		type: {
			const: 'storage.write',
			type: 'string',
		},
	},
	required: ['type', 'properties'],
	type: 'object',
} as const;

export const Event_session_updatedSchema = {
	properties: {
		properties: {
			properties: {
				info: {
					$ref: '#/components/schemas/Session',
				},
			},
			required: ['info'],
			type: 'object',
		},
		type: {
			const: 'session.updated',
			type: 'string',
		},
	},
	required: ['type', 'properties'],
	type: 'object',
} as const;

export const SessionSchema = {
	properties: {
		id: {
			pattern: '^ses',
			type: 'string',
		},
		parentID: {
			pattern: '^ses',
			type: 'string',
		},
		revert: {
			properties: {
				messageID: {
					type: 'string',
				},
				part: {
					type: 'number',
				},
				snapshot: {
					type: 'string',
				},
			},
			required: ['messageID', 'part'],
			type: 'object',
		},
		share: {
			properties: {
				url: {
					type: 'string',
				},
			},
			required: ['url'],
			type: 'object',
		},
		time: {
			properties: {
				created: {
					type: 'number',
				},
				updated: {
					type: 'number',
				},
			},
			required: ['created', 'updated'],
			type: 'object',
		},
		title: {
			type: 'string',
		},
		version: {
			type: 'string',
		},
	},
	required: ['id', 'title', 'version', 'time'],
	type: 'object',
} as const;

export const Event_session_deletedSchema = {
	properties: {
		properties: {
			properties: {
				info: {
					$ref: '#/components/schemas/Session',
				},
			},
			required: ['info'],
			type: 'object',
		},
		type: {
			const: 'session.deleted',
			type: 'string',
		},
	},
	required: ['type', 'properties'],
	type: 'object',
} as const;

export const Event_session_idleSchema = {
	properties: {
		properties: {
			properties: {
				sessionID: {
					type: 'string',
				},
			},
			required: ['sessionID'],
			type: 'object',
		},
		type: {
			const: 'session.idle',
			type: 'string',
		},
	},
	required: ['type', 'properties'],
	type: 'object',
} as const;

export const Event_session_errorSchema = {
	properties: {
		properties: {
			properties: {
				error: {
					discriminator: {
						mapping: {
							MessageAbortedError: '#/components/schemas/MessageAbortedError',
							MessageOutputLengthError:
								'#/components/schemas/MessageOutputLengthError',
							ProviderAuthError: '#/components/schemas/ProviderAuthError',
							UnknownError: '#/components/schemas/UnknownError',
						},
						propertyName: 'name',
					},
					oneOf: [
						{
							$ref: '#/components/schemas/ProviderAuthError',
						},
						{
							$ref: '#/components/schemas/UnknownError',
						},
						{
							$ref: '#/components/schemas/MessageOutputLengthError',
						},
						{
							$ref: '#/components/schemas/MessageAbortedError',
						},
					],
				},
				sessionID: {
					type: 'string',
				},
			},
			type: 'object',
		},
		type: {
			const: 'session.error',
			type: 'string',
		},
	},
	required: ['type', 'properties'],
	type: 'object',
} as const;

export const Event_file_watcher_updatedSchema = {
	properties: {
		properties: {
			properties: {
				event: {
					anyOf: [
						{
							const: 'rename',
							type: 'string',
						},
						{
							const: 'change',
							type: 'string',
						},
					],
				},
				file: {
					type: 'string',
				},
			},
			required: ['file', 'event'],
			type: 'object',
		},
		type: {
			const: 'file.watcher.updated',
			type: 'string',
		},
	},
	required: ['type', 'properties'],
	type: 'object',
} as const;

export const AppSchema = {
	properties: {
		git: {
			type: 'boolean',
		},
		hostname: {
			type: 'string',
		},
		path: {
			properties: {
				config: {
					type: 'string',
				},
				cwd: {
					type: 'string',
				},
				data: {
					type: 'string',
				},
				root: {
					type: 'string',
				},
				state: {
					type: 'string',
				},
			},
			required: ['config', 'data', 'root', 'cwd', 'state'],
			type: 'object',
		},
		time: {
			properties: {
				initialized: {
					type: 'number',
				},
			},
			type: 'object',
		},
	},
	required: ['hostname', 'git', 'path', 'time'],
	type: 'object',
} as const;

export const ConfigSchema = {
	additionalProperties: false,
	properties: {
		$schema: {
			description: 'JSON schema reference for configuration validation',
			type: 'string',
		},
		autoshare: {
			description:
				"@deprecated Use 'share' field instead. Share newly created sessions automatically",
			type: 'boolean',
		},
		autoupdate: {
			description: 'Automatically update to the latest version',
			type: 'boolean',
		},
		disabled_providers: {
			description: 'Disable providers that are loaded automatically',
			items: {
				type: 'string',
			},
			type: 'array',
		},
		experimental: {
			properties: {
				hook: {
					properties: {
						file_edited: {
							additionalProperties: {
								items: {
									properties: {
										command: {
											items: {
												type: 'string',
											},
											type: 'array',
										},
										environment: {
											additionalProperties: {
												type: 'string',
											},
											type: 'object',
										},
									},
									required: ['command'],
									type: 'object',
								},
								type: 'array',
							},
							type: 'object',
						},
						session_completed: {
							items: {
								properties: {
									command: {
										items: {
											type: 'string',
										},
										type: 'array',
									},
									environment: {
										additionalProperties: {
											type: 'string',
										},
										type: 'object',
									},
								},
								required: ['command'],
								type: 'object',
							},
							type: 'array',
						},
					},
					type: 'object',
				},
			},
			type: 'object',
		},
		instructions: {
			description: 'Additional instruction files or patterns to include',
			items: {
				type: 'string',
			},
			type: 'array',
		},
		keybinds: {
			$ref: '#/components/schemas/KeybindsConfig',
			description: 'Custom keybind configurations',
		},
		layout: {
			$ref: '#/components/schemas/LayoutConfig',
			description: '@deprecated Always uses stretch layout.',
		},
		mcp: {
			additionalProperties: {
				discriminator: {
					mapping: {
						local: '#/components/schemas/McpLocalConfig',
						remote: '#/components/schemas/McpRemoteConfig',
					},
					propertyName: 'type',
				},
				oneOf: [
					{
						$ref: '#/components/schemas/McpLocalConfig',
					},
					{
						$ref: '#/components/schemas/McpRemoteConfig',
					},
				],
			},
			description: 'MCP (Model Context Protocol) server configurations',
			type: 'object',
		},
		mode: {
			additionalProperties: {
				$ref: '#/components/schemas/ModeConfig',
			},
			description: 'Modes configuration, see https://opencode.ai/docs/modes',
			properties: {
				build: {
					$ref: '#/components/schemas/ModeConfig',
				},
				plan: {
					$ref: '#/components/schemas/ModeConfig',
				},
			},
			type: 'object',
		},
		model: {
			description:
				'Model to use in the format of provider/model, eg anthropic/claude-2',
			type: 'string',
		},
		provider: {
			additionalProperties: {
				properties: {
					api: {
						type: 'string',
					},
					env: {
						items: {
							type: 'string',
						},
						type: 'array',
					},
					id: {
						type: 'string',
					},
					models: {
						additionalProperties: {
							properties: {
								attachment: {
									type: 'boolean',
								},
								cost: {
									properties: {
										cache_read: {
											type: 'number',
										},
										cache_write: {
											type: 'number',
										},
										input: {
											type: 'number',
										},
										output: {
											type: 'number',
										},
									},
									required: ['input', 'output'],
									type: 'object',
								},
								id: {
									type: 'string',
								},
								limit: {
									properties: {
										context: {
											type: 'number',
										},
										output: {
											type: 'number',
										},
									},
									required: ['context', 'output'],
									type: 'object',
								},
								name: {
									type: 'string',
								},
								options: {
									additionalProperties: {},
									type: 'object',
								},
								reasoning: {
									type: 'boolean',
								},
								release_date: {
									type: 'string',
								},
								temperature: {
									type: 'boolean',
								},
								tool_call: {
									type: 'boolean',
								},
							},
							type: 'object',
						},
						type: 'object',
					},
					name: {
						type: 'string',
					},
					npm: {
						type: 'string',
					},
					options: {
						additionalProperties: {},
						type: 'object',
					},
				},
				required: ['models'],
				type: 'object',
			},
			description: 'Custom provider configurations and model overrides',
			type: 'object',
		},
		share: {
			description:
				"Control sharing behavior:'manual' allows manual sharing via commands, 'auto' enables automatic sharing, 'disabled' disables all sharing",
			enum: ['manual', 'auto', 'disabled'],
			type: 'string',
		},
		small_model: {
			description:
				'Small model to use for tasks like summarization and title generation in the format of provider/model',
			type: 'string',
		},
		theme: {
			description: 'Theme name to use for the interface',
			type: 'string',
		},
		username: {
			description:
				'Custom username to display in conversations instead of system username',
			type: 'string',
		},
	},
	type: 'object',
} as const;

export const KeybindsConfigSchema = {
	additionalProperties: false,
	properties: {
		app_exit: {
			default: 'ctrl+c,<leader>q',
			description: 'Exit the application',
			type: 'string',
		},
		app_help: {
			default: '<leader>h',
			description: 'Show help dialog',
			type: 'string',
		},
		editor_open: {
			default: '<leader>e',
			description: 'Open external editor',
			type: 'string',
		},
		file_close: {
			default: 'esc',
			description: 'Close file',
			type: 'string',
		},
		file_diff_toggle: {
			default: '<leader>v',
			description: 'Split/unified diff',
			type: 'string',
		},
		file_list: {
			default: '<leader>f',
			description: 'List files',
			type: 'string',
		},
		file_search: {
			default: '<leader>/',
			description: 'Search file',
			type: 'string',
		},
		input_clear: {
			default: 'ctrl+c',
			description: 'Clear input field',
			type: 'string',
		},
		input_newline: {
			default: 'shift+enter,ctrl+j',
			description: 'Insert newline in input',
			type: 'string',
		},
		input_paste: {
			default: 'ctrl+v',
			description: 'Paste from clipboard',
			type: 'string',
		},
		input_submit: {
			default: 'enter',
			description: 'Submit input',
			type: 'string',
		},
		leader: {
			default: 'ctrl+x',
			description: 'Leader key for keybind combinations',
			type: 'string',
		},
		messages_copy: {
			default: '<leader>y',
			description: 'Copy message',
			type: 'string',
		},
		messages_first: {
			default: 'ctrl+g',
			description: 'Navigate to first message',
			type: 'string',
		},
		messages_half_page_down: {
			default: 'ctrl+alt+d',
			description: 'Scroll messages down by half page',
			type: 'string',
		},
		messages_half_page_up: {
			default: 'ctrl+alt+u',
			description: 'Scroll messages up by half page',
			type: 'string',
		},
		messages_last: {
			default: 'ctrl+alt+g',
			description: 'Navigate to last message',
			type: 'string',
		},
		messages_layout_toggle: {
			default: '<leader>p',
			description: 'Toggle layout',
			type: 'string',
		},
		messages_next: {
			default: 'ctrl+down',
			description: 'Navigate to next message',
			type: 'string',
		},
		messages_page_down: {
			default: 'pgdown',
			description: 'Scroll messages down by one page',
			type: 'string',
		},
		messages_page_up: {
			default: 'pgup',
			description: 'Scroll messages up by one page',
			type: 'string',
		},
		messages_previous: {
			default: 'ctrl+up',
			description: 'Navigate to previous message',
			type: 'string',
		},
		messages_revert: {
			default: '<leader>r',
			description: 'Revert message',
			type: 'string',
		},
		model_list: {
			default: '<leader>m',
			description: 'List available models',
			type: 'string',
		},
		project_init: {
			default: '<leader>i',
			description: 'Create/update AGENTS.md',
			type: 'string',
		},
		session_compact: {
			default: '<leader>c',
			description: 'Compact the session',
			type: 'string',
		},
		session_export: {
			default: '<leader>x',
			description: 'Export session to editor',
			type: 'string',
		},
		session_interrupt: {
			default: 'esc',
			description: 'Interrupt current session',
			type: 'string',
		},
		session_list: {
			default: '<leader>l',
			description: 'List all sessions',
			type: 'string',
		},
		session_new: {
			default: '<leader>n',
			description: 'Create a new session',
			type: 'string',
		},
		session_share: {
			default: '<leader>s',
			description: 'Share current session',
			type: 'string',
		},
		session_unshare: {
			default: '<leader>u',
			description: 'Unshare current session',
			type: 'string',
		},
		switch_mode: {
			default: 'tab',
			description: 'Next mode',
			type: 'string',
		},
		switch_mode_reverse: {
			default: 'shift+tab',
			description: 'Previous Mode',
			type: 'string',
		},
		theme_list: {
			default: '<leader>t',
			description: 'List available themes',
			type: 'string',
		},
		tool_details: {
			default: '<leader>d',
			description: 'Toggle tool details',
			type: 'string',
		},
	},
	required: [
		'leader',
		'app_help',
		'switch_mode',
		'switch_mode_reverse',
		'editor_open',
		'session_export',
		'session_new',
		'session_list',
		'session_share',
		'session_unshare',
		'session_interrupt',
		'session_compact',
		'tool_details',
		'model_list',
		'theme_list',
		'file_list',
		'file_close',
		'file_search',
		'file_diff_toggle',
		'project_init',
		'input_clear',
		'input_paste',
		'input_submit',
		'input_newline',
		'messages_page_up',
		'messages_page_down',
		'messages_half_page_up',
		'messages_half_page_down',
		'messages_previous',
		'messages_next',
		'messages_first',
		'messages_last',
		'messages_layout_toggle',
		'messages_copy',
		'messages_revert',
		'app_exit',
	],
	type: 'object',
} as const;

export const ModeConfigSchema = {
	properties: {
		model: {
			type: 'string',
		},
		prompt: {
			type: 'string',
		},
		tools: {
			additionalProperties: {
				type: 'boolean',
			},
			type: 'object',
		},
	},
	type: 'object',
} as const;

export const ProviderSchema = {
	properties: {
		api: {
			type: 'string',
		},
		env: {
			items: {
				type: 'string',
			},
			type: 'array',
		},
		id: {
			type: 'string',
		},
		models: {
			additionalProperties: {
				$ref: '#/components/schemas/Model',
			},
			type: 'object',
		},
		name: {
			type: 'string',
		},
		npm: {
			type: 'string',
		},
	},
	required: ['name', 'env', 'id', 'models'],
	type: 'object',
} as const;

export const ModelSchema = {
	properties: {
		attachment: {
			type: 'boolean',
		},
		cost: {
			properties: {
				cache_read: {
					type: 'number',
				},
				cache_write: {
					type: 'number',
				},
				input: {
					type: 'number',
				},
				output: {
					type: 'number',
				},
			},
			required: ['input', 'output'],
			type: 'object',
		},
		id: {
			type: 'string',
		},
		limit: {
			properties: {
				context: {
					type: 'number',
				},
				output: {
					type: 'number',
				},
			},
			required: ['context', 'output'],
			type: 'object',
		},
		name: {
			type: 'string',
		},
		options: {
			additionalProperties: {},
			type: 'object',
		},
		reasoning: {
			type: 'boolean',
		},
		release_date: {
			type: 'string',
		},
		temperature: {
			type: 'boolean',
		},
		tool_call: {
			type: 'boolean',
		},
	},
	required: [
		'id',
		'name',
		'release_date',
		'attachment',
		'reasoning',
		'temperature',
		'tool_call',
		'cost',
		'limit',
		'options',
	],
	type: 'object',
} as const;

export const McpLocalConfigSchema = {
	additionalProperties: false,
	properties: {
		command: {
			description: 'Command and arguments to run the MCP server',
			items: {
				type: 'string',
			},
			type: 'array',
		},
		enabled: {
			description: 'Enable or disable the MCP server on startup',
			type: 'boolean',
		},
		environment: {
			additionalProperties: {
				type: 'string',
			},
			description: 'Environment variables to set when running the MCP server',
			type: 'object',
		},
		type: {
			const: 'local',
			description: 'Type of MCP server connection',
			type: 'string',
		},
	},
	required: ['type', 'command'],
	type: 'object',
} as const;

export const McpRemoteConfigSchema = {
	additionalProperties: false,
	properties: {
		enabled: {
			description: 'Enable or disable the MCP server on startup',
			type: 'boolean',
		},
		headers: {
			additionalProperties: {
				type: 'string',
			},
			description: 'Headers to send with the request',
			type: 'object',
		},
		type: {
			const: 'remote',
			description: 'Type of MCP server connection',
			type: 'string',
		},
		url: {
			description: 'URL of the remote MCP server',
			type: 'string',
		},
	},
	required: ['type', 'url'],
	type: 'object',
} as const;

export const LayoutConfigSchema = {
	enum: ['auto', 'stretch'],
	type: 'string',
} as const;

export const ErrorSchema = {
	properties: {
		data: {
			additionalProperties: {},
			type: 'object',
		},
	},
	required: ['data'],
	type: 'object',
} as const;

export const TextPartInputSchema = {
	properties: {
		id: {
			type: 'string',
		},
		synthetic: {
			type: 'boolean',
		},
		text: {
			type: 'string',
		},
		time: {
			properties: {
				end: {
					type: 'number',
				},
				start: {
					type: 'number',
				},
			},
			required: ['start'],
			type: 'object',
		},
		type: {
			const: 'text',
			type: 'string',
		},
	},
	required: ['type', 'text'],
	type: 'object',
} as const;

export const FilePartInputSchema = {
	properties: {
		filename: {
			type: 'string',
		},
		id: {
			type: 'string',
		},
		mime: {
			type: 'string',
		},
		source: {
			$ref: '#/components/schemas/FilePartSource',
		},
		type: {
			const: 'file',
			type: 'string',
		},
		url: {
			type: 'string',
		},
	},
	required: ['type', 'mime', 'url'],
	type: 'object',
} as const;

export const MatchSchema = {
	properties: {
		absolute_offset: {
			type: 'number',
		},
		line_number: {
			type: 'number',
		},
		lines: {
			properties: {
				text: {
					type: 'string',
				},
			},
			required: ['text'],
			type: 'object',
		},
		path: {
			properties: {
				text: {
					type: 'string',
				},
			},
			required: ['text'],
			type: 'object',
		},
		submatches: {
			items: {
				properties: {
					end: {
						type: 'number',
					},
					match: {
						properties: {
							text: {
								type: 'string',
							},
						},
						required: ['text'],
						type: 'object',
					},
					start: {
						type: 'number',
					},
				},
				required: ['match', 'start', 'end'],
				type: 'object',
			},
			type: 'array',
		},
	},
	required: ['path', 'lines', 'line_number', 'absolute_offset', 'submatches'],
	type: 'object',
} as const;

export const SymbolSchema = {
	properties: {
		kind: {
			type: 'number',
		},
		location: {
			properties: {
				range: {
					$ref: '#/components/schemas/Range',
				},
				uri: {
					type: 'string',
				},
			},
			required: ['uri', 'range'],
			type: 'object',
		},
		name: {
			type: 'string',
		},
	},
	required: ['name', 'kind', 'location'],
	type: 'object',
} as const;

export const FileSchema = {
	properties: {
		added: {
			type: 'integer',
		},
		path: {
			type: 'string',
		},
		removed: {
			type: 'integer',
		},
		status: {
			enum: ['added', 'deleted', 'modified'],
			type: 'string',
		},
	},
	required: ['path', 'added', 'removed', 'status'],
	type: 'object',
} as const;

export const ModeSchema = {
	properties: {
		model: {
			properties: {
				modelID: {
					type: 'string',
				},
				providerID: {
					type: 'string',
				},
			},
			required: ['modelID', 'providerID'],
			type: 'object',
		},
		name: {
			type: 'string',
		},
		prompt: {
			type: 'string',
		},
		tools: {
			additionalProperties: {
				type: 'boolean',
			},
			type: 'object',
		},
	},
	required: ['name', 'tools'],
	type: 'object',
} as const;
